import asyncio
import json
import os
import websockets

# URI of the WebSocket server (must match the configuration of your handler)
WS_SERVER_URI = "ws://127.0.0.1:8765"

def get_mininet_macs():
    """
    Reads MAC addresses from a file pre-generated by Mininet.    
    """
    mac_file = "/tmp/host_info.json"

    if not os.path.exists(mac_file):
        print("MAC address file not found. Make sure Mininet is running and generating the file.")
        return {}

    with open(mac_file, "r") as f:
        hosts_mac = json.load(f)

    print("MAC addresses loaded:", hosts_mac)
    return hosts_mac

def select_hosts(hosts_mac):
    """
    Allows you to select source and destination hosts.
    """
    print("\nSelect the hosts for packet transmission:\n")
    host_list = list(hosts_mac.items())

    for i, (host, mac_info) in enumerate(host_list):
        print(f"{i + 1}. {host} - {mac_info}")

    try:
        src_index = int(input("\nSelect the source host (1,2,...): ")) - 1
        dst_index = int(input("Select the destination host (1,2,...): ")) - 1

        if src_index == dst_index:
            print("Error: the source and destination hosts must be different.")
            return None, None

        src = host_list[src_index][1]
        dst = host_list[dst_index][1]
        
        return src, dst
    except (ValueError, IndexError):
        print("Invalid selection.")
        return None, None

async def send_ws_request(data):
    """
    Sends a JSON request via WebSocket and waits for the response.
    """
    async with websockets.connect(WS_SERVER_URI) as websocket:
        await websocket.send(json.dumps(data))
        response = await websocket.recv()
        return json.loads(response)
    
def run_async(coro):
    loop = asyncio.get_event_loop()
    return loop.run_until_complete(coro)


def send_websocket_allocate_request(src, dst, bandwidth=8):
    """
    Sends a WebSocket request to allocate a flow.
    """
    data = {
        "command": "allocate_flow",
        "src": src['mac'],
        "dst": dst['mac'],
        "bandwidth": bandwidth
    }
    print(f"\nSending WebSocket request: {data}")
    response = run_async(send_ws_request(data))
    if response.get("status") == "success":
        print("Flow reserved successfully!")
    else:
        print(f"Error in flow reservation: {response.get('reason', 'Unknown error')}")

def send_websocket_delete_request(src, dst):
    """
    Sends a WebSocket request to delete a flow.
    """
    data = {
        "command": "delete_flow",
        "src": src['mac'],
        "dst": dst['mac']
    }
    print(f"\nSending WebSocket request: {data}")
    response = run_async(send_ws_request(data))
    if response.get("status") == "success":
        print("Flow deleted successfully!")
    else:
        print(f"Error in flow deletion: {response.get('reason', 'Unknown error')}")

def send_websocket_dump_flows_request(switch):
    """
    Send a WebSocket request to dump flows from a switch.
    """
    data = {
        "command": "dump_flows",
        "switch": switch
    }
    print(f"\nSending WebSocket request: {data}")
    response = run_async(send_ws_request(data))
    if response.get("status") == "success":
        print("Switch flow table: \n", response.get("result"))
    else:
        print(f"Error in flow dump: {response.get('reason', 'Unknown error')}")

def send_websocket_show_reservation_request():
    """
    Send a WebSocket request toshow_reservation.
    """
    data = {
        "command": "show_reservation"
    }
    print(f"\nSending WebSocket request: {data}")
    response = run_async(send_ws_request(data))
    if response.get("status") == "success":
        print("Reservation table: \n", response.get("result"))
    else:
        print(f"Error in showing Reservation table: {response.get('reason', 'Unknown error')}")

# def send_websocket_ping_request(src, dst):          
#     """
#     Sends a WebSocket request for ping.
#     """         
#     data = {         
#         "command": "ping",         
#         "src": src, 
#         "dst": dst       
#     }         
#     print(f"\nSending WebSocket request: {data}")         
#     response = run_async(send_ws_request(data))         
#     if response.get("status") == "success":         
#         print("Ping result: \n", response.get("result"))         
#     else:         
#         print(f"Error in ping: {response.get('reason', 'Unknown error')}")

def run_cli():
    """
    CLI interface that shows an intro and listens for commands.
    """
    print("Welcome to the Flow Manager for Mininet (WebSocket)!")
    print("Available commands:")
    print("  allocate - Allocate a new flow")
    print("  show     - Show flow reservation table")
    print("  delete   - Delete an existing flow")
    print("  dump     - Dump flows from a switch")
    # print("  ping     - Ping between 2 hosts")
    print("  exit     - Exit")

    hosts_mac = get_mininet_macs()
    if not hosts_mac:
        print("No MAC addresses found. Make sure Mininet is running.")
        return

    while True:
        command = input("\nEnter command (allocate, show, delete, dump, exit): ").strip().lower()
        if command == "exit":
            print("Exiting...")
            break
        elif command == "allocate":
            src, dst = select_hosts(hosts_mac)
            if src and dst:
                try:
                    bandwidth = int(input("Enter the bandwidth (Mbps): "))
                except ValueError:
                    print("Invalid bandwidth value, defaulting to 8 Mbps.")
                    bandwidth = 8
                send_websocket_allocate_request(src, dst, bandwidth)
        elif command == "delete":
            src, dst = select_hosts(hosts_mac)
            if src and dst:
                send_websocket_delete_request(src, dst)
        elif command == "dump":
            switch = input("Enter switch name: ")  # Example: s1
            send_websocket_dump_flows_request(switch) 
        elif command == "show":
            send_websocket_show_reservation_request()
        # elif command == "ping": # Debug command
        #     src = input("Enter src host name: ")  # Example: h1
        #     dst = input("Enter dst host name: ")  # Example: h2
        #     send_websocket_ping_request(src, dst ) 

        else:
            print("Unknown command. Try 'allocate', 'show', 'delete', 'dump' or 'exit'.")

def main():
    run_cli()

if __name__ == "__main__":
    main()
